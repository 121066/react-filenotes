server{
    location  /{
        root index.html 
        proxy_pass https:dbyxs.xyz:8002
          # 使用名为nginx_cache的缓存空间  
            proxy_cache hot_cache;  
            # 对于200、206、304、301、302状态码的数据缓存1天  
            proxy_cache_valid 200 206 304 301 302 1d;  
            # 对于其他状态的数据缓存30分钟  
            proxy_cache_valid any 30m;  
            # 定义生成缓存键的规则（请求的url+参数作为key）  
            proxy_cache_key $host$uri$is_args$args;  
            # 资源至少被重复访问三次后再加入缓存  
            proxy_cache_min_uses 3;  
            # 出现重复请求时，只让一个去后端读数据，其他的从缓存中读取  
            proxy_cache_lock on;  
            # 上面的锁超时时间为3s，超过3s未获取数据，其他请求直接去后端  
            proxy_cache_lock_timeout 3s;  
            # 对于请求参数或cookie中声明了不缓存的数据，不再加入缓存  
            proxy_no_cache $cookie_nocache $arg_nocache $arg_comment;  
            # 在响应头中添加一个缓存是否命中的状态（便于调试）  
            add_header Cache-status $upstream_cache_status;  
              # 允许跨域的请求，可以自定义变量$http_origin，*表示所有  
            add_header 'Access-Control-Allow-Origin' *;  
            # 允许携带cookie请求  
            add_header 'Access-Control-Allow-Credentials' 'true';  
            # 允许跨域请求的方法：GET,POST,OPTIONS,PUT  
            add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT';  
            # 允许请求时携带的头部信息，*表示所有  
            add_header 'Access-Control-Allow-Headers' *;  
            # 允许发送按段获取资源的请求  
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';  
            # 一定要有！！！否则Post请求无法进行跨域！  
            # 在发送Post跨域请求前，会以Options方式发送预检请求，服务器接受时才会正式请求  
            if ($request_method = 'OPTIONS') {  
        add_header 'Access-Control-Max-Age' 1728000;  
        add_header 'Content-Type' 'text/plain; charset=utf-8';  
        add_header 'Content-Length' 0;  
        # 对于Options方式的请求返回204，表示接受跨域请求  
        return 204;  
    } 
    }
    location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|svg|ico|txt|js|css){
        # 最后面的值在上线前可配置为允许的域名地址  
    valid_referers blocked 192.168.12.129;  
    if ($invalid_referer) {  
        # 可以配置成返回一张禁止盗取的图片  
        # rewrite   ^/ http://xx.xx.com/NO.jpg;  
        # 也可直接返回403  
        return   403;  
    } 
        root /soft/nginx/static_resources
        expirs 7d
    }
    http{
    # 开启压缩机制
    gzip on;
    # 指定会被压缩的文件类型(也可自己配置其他类型)
    gzip_types text/plain application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;
    # 设置压缩级别，越高资源消耗越大，但压缩效果越好
    gzip_comp_level 5;
    # 在头部中添加Vary: Accept-Encoding（建议开启）
    gzip_vary on;
    # 处理压缩请求的缓冲区数量和大小
    gzip_buffers 16 8k;
    # 对于不支持压缩功能的客户端请求不开启压缩机制
    gzip_disable "MSIE [1-6]\."; # 低版本的IE浏览器不支持压缩
    # 设置压缩响应所支持的HTTP最低版本
    gzip_http_version 1.1;
    # 设置触发压缩的最小阈值
    gzip_min_length 2k;
    # 关闭对后端服务器的响应结果进行压缩
    gzip_proxied off;
    }
}